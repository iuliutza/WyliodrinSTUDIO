// DO NOT EDIT THIS FILE, IT IS AUTMATICALLY GENERATED

module.exports = function (blockly) {
	var Blockly = blockly.Blockly;
	// var goog = blockly.goog;

	Blockly.Python.adafruit_lcd_setup = function () {
		if (!Blockly.Python.definitions_['adafruit_lcd_setup']) {
			Blockly.Python.definitions_['adafruit_lcd_setup'] = 'import Adafruit_CharLCD\n';
		}
	};

	Blockly.Python['adafruit_init_lcd'] = function (block) {
		Blockly.Python.adafruit_lcd_setup();
		var lcd = Blockly.Python.variableDB_.getDistinctName(
			'lcd', Blockly.Generator.NAME_TYPE);
		var dropdown_rows = block.getFieldValue('rows');
		var dropdown_cols = block.getFieldValue('cols');
		var value_rs = Blockly.Python.valueToCode(block, 'rs', Blockly.Python.ORDER_ATOMIC);
		var value_strobe = Blockly.Python.valueToCode(block, 'strobe', Blockly.Python.ORDER_ATOMIC);
		var value_backlight = Blockly.Python.valueToCode(block, 'backlight', Blockly.Python.ORDER_ATOMIC);
		var value_d0 = Blockly.Python.valueToCode(block, 'd0', Blockly.Python.ORDER_ATOMIC);
		var value_d1 = Blockly.Python.valueToCode(block, 'd1', Blockly.Python.ORDER_ATOMIC);
		var value_d2 = Blockly.Python.valueToCode(block, 'd2', Blockly.Python.ORDER_ATOMIC);
		var value_d3 = Blockly.Python.valueToCode(block, 'd3', Blockly.Python.ORDER_ATOMIC);
		Blockly.Python.adafruit_lcd = lcd;
		Blockly.Python.definitions_['adafruit_lcd_variable'] = lcd + ' = Adafruit_CharLCD.Adafruit_CharLCD (' + value_rs + ', ' + value_strobe + ', ' + value_d0 + ', ' + value_d1 + ', ' + value_d2 + ', ' + value_d3 + ', ' + dropdown_cols + ', ' + dropdown_rows + ', ' + value_backlight + ')\n';
		// TODO: Assemble Python into code variable.
		var code = '';
		return code;
	};

	Blockly.Python['adafruit_clear_lcd'] = function (/* block */) {
		if (Blockly.Python.definitions_['adafruit_lcd_variable']) {
			Blockly.Python.adafruit_lcd_setup();
			// TODO: Assemble Python into code variable.
			var code = Blockly.Python.adafruit_lcd + '.clear()\n';
			return code;
		}
		else throw 'You must init the LCD before using clear lcd';
	};

	Blockly.Python['adafruit_reset_lcd'] = function (/* block */) {
		if (Blockly.Python.definitions_['adafruit_lcd_variable']) {
			Blockly.Python.adafruit_lcd_setup();
			// TODO: Assemble Python into code variable.
			var code = Blockly.Python.adafruit_lcd + '.home()\n';
			return code;
		}
		else throw 'You must init the LCD before using reset lcd';
	};

	Blockly.Python['adafruit_set_position_lcd'] = function (block) {
		Blockly.Python.adafruit_lcd_setup();
		if (Blockly.Python.definitions_['adafruit_lcd_variable']) {
			var value_col = Blockly.Python.valueToCode(block, 'col', Blockly.Python.ORDER_ATOMIC);
			var value_row = Blockly.Python.valueToCode(block, 'row', Blockly.Python.ORDER_ATOMIC);
			// TODO: Assemble Python into code variable.
			var code = Blockly.Python.adafruit_lcd + '.set_cursor(' + value_col + '-1, ' + value_row + '-1)\n';
			return code;
		}
		else throw 'You must init the LCD before using set position lcd';
	};

	Blockly.Python['adafruit_print_lcd'] = function (block) {
		Blockly.Python.adafruit_lcd_setup();
		if (Blockly.Python.definitions_['adafruit_lcd_variable']) {
			var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);
			// TODO: Assemble Python into code variable.
			var code = Blockly.Python.adafruit_lcd + '.message (str(' + value_text + '))\n';
			return code;
		}
		else throw 'You must init the LCD before using print lcd';
	};
};